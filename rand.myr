use "die.use"
use "fmt.use"
use "types.use"
use "alloc.use"
/*
   Translated by Ori Bernstein
 */

/* 
  A C-program for MT19937, with initialization improved 2002/1/26.
  Coded by Takuji Nishimura and Makoto Matsumoto.
  
  Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,
  All rights reserved.                          
  
  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions
  are met:
  
    1. Redistributions of source code must retain the above copyright
       notice, this list of conditions and the following disclaimer.
 
    2. Redistributions in binary form must reproduce the above copyright
       notice, this list of conditions and the following disclaimer in the
       documentation and/or other materials provided with the distribution.
 
    3. The names of its contributors may not be used to endorse or promote 
       products derived from this software without specific prior written 
       permission.
 
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
  Any feedback is very welcome.
  http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html
  email: m-mat @ math.sci.hiroshima-u.ac.jp (remove space)
 */

pkg std =
	type rng

	/* no mkrng() yet because we don't have anything to automatically
	   seed it with yet */
	const mksrng	: (seed : uint32 -> rng*)
	const rand32	: (rng : rng* -> uint32)
;;

type rng = struct
	state	: uint32[624]
	i	: uint32
;;

const mksrng = {seed
	var rng

	rng = bytealloc(sizeof(rng)) castto(rng*)
	init(rng, seed)
	-> rng
}

const init = {rng, seed
	var i

	for i = 0; i < 624; i++
		rng.state[i] = seed
		seed = 1812433253 * (seed ^ (seed >> 30)) + i + 1
	;;
	rng.i = i
}


const rand32 = {rng
	var x

	if rng.i == 624
		next(rng)
	;;
	x = rng.state[rng.i]
	rng.i++

	x ^= x >> 11
	x ^= (x << 7) & 0x9D2C5680
	x ^= (x << 15) & 0xEFC60000
	-> x ^ (x >> 18)
}


const next = {rng
	var k
	var y

	for k = 0; k < 227; k++
		y = (rng.state[k] & 0x80000000) | (rng.state[k + 1] & 0x7FFFFFFF)
		rng.state[k] = rng.state[k + 397] ^ (y >> 1) ^ ((y & 1) * 0x9908B0DF)
	;;
	for ; k < 623; k++
		y = (rng.state[k] & 0x80000000) | (rng.state[k + 1] & 0x7FFFFFFF)
		rng.state[k] = rng.state[k - 227] ^ (y >> 1) ^ ((y & 1) * 0x9908B0DF);
	;;
	y = (rng.state[623] & 0x80000000) | (rng.state[0] & 0x7FFFFFFF)
	rng.state[623] = rng.state[396] ^ (y >> 1) ^ ((y & 1) * 0x9908B0DF);
	rng.i = 0
}
